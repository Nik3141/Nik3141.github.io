Binary Numbers
Algorithms are sets of instructions which manipulate data
Data is information, like numbers or letters
There are many datatypes, which have different limits and uses
Boolean type:
Integer types:
Decimal types:
Char type:

Datastructures are ways to organize data so that it can be stored and retrieved.
Datastructures can have different organization schemes, which is primarily what sets different datastructure types apart.
For now we'll deal with datastructures which use a key-value organizational scheme.

First datastructure we'll look at is:
Arrays/lists/vectors
- key is an integer

String is an array of chars, sometimes is counted as its own primitive type

Next:
Dictionaries/maps
- key is a string normally

If we want to manipulate data, what we need are variables; variables allow us to modify and compare the values of data in our programs.
A variable normally must be 'declared', meaning we tell the computer what the name of the variable is (how we will refer to it in our code) and what datatype it will be.
This lets the computer know in advance how much space to reserve for it: if we declare a byte type variable x, it knows it only needs to allocate 8 bits of memory for it.
Some languages, however, we don't need to tell the computer what type a variable will be, and it will figure it out from context.
In Java, I might declare a variable which stores the number of cats like so:
int numCats;
All I've done is stated that the variable numCats will be an integer type.

To give a variable a value, we have to use the 'assignment operator', which in most languages is '='.
We can do variable assignment either during the variable's declaration or afterwards.
As an example in Java, we could have the following code:

int x;
x = 5;

or we could have:

int x = 5;

Either would be acceptable ways to declare the integer x and assign it to 5. Notice that the value on the right is assigned to the variable on the left of the assignment operator.

Statements:
Notice that the above code snippets all ended with semicolons (;): in Java, all *statements* must end with semicolons.
In Python, statements can have semicolons, but are mostly indicated by a line break.
Computer code is essentially made up of many many individual statements, which each do one small thing. Together, those small actions combine as algorithms and can do powerful things.

Operators:
Above, we learned about the assignment operator, which sets a variable to a specific value. However, there are many more operators than this, broken into several categories:
arithmetic, relational, logical, unary, and bitwise/bitshift. I'm going to skip the bitwise/bitshift operators, because I talked about them on the binary numbers page.
Arithmetic + - * / %
Relational > >= < <= ==
Logical AND OR NOT 
Unary - ++ --

Concatenation
Escape Characters
Casting

Expressions in computer science are very similar to expressions in math.
In math, an expression is a mix of numbers and operations which can be 'evaluated' to obtain a final result. For example,
5 + (3 - 7) * 4 is an expression, which when evaluated becomes -11.
Expressions follow a predefined and universally agreed-upon order of operations, which in math is normally remembered with the acronym PEMDAS.
Parenthesis, Exponentiation, Multiplication, Division, Addition, Subtraction.

Similarly, in computer science, an expression can be evaluated, and it will yield either a number or a true/false value.
The order of operations for evaluating expressions in computer science is normally PEMDAS, but may vary slightly for different languages.

For example, if I have a variable x and a variable y, where x equals 3 and y equals 4, the expression x < y evaluates to True, while the expressions x > y or x == y evaluate to False.
The reason I used x == y instead of x = y is because x = y assigns the value stored in y to the variable x, so the '==' operator determines equivalency while the '=' operator assigns the value on the right to the variable on the left.

Another example: 0.5 * (3 + 17) > x + y evaluates to 10 > 7 which evaluates to True.

Logical operators are a bit different from mathematical operators because they operate on True/False values. There are three main logical operators: AND, OR, and NOT.
USE A TABLE
AND
OR
NOT

DEMORGAN's LAW

Conditionals
If
Else
Else If

Loops
For
While

Libraries and Modules

nth D arrays


OOP

Functional